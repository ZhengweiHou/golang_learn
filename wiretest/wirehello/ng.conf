# 定义上游服务器组cop-appserver，用于负载均衡和故障转移
upstream cop-appserver {  # 定义名为cop-appserver的上游服务器组
    server 10.200.1.231:8288    max_fails=3 fail_timeout=30s;  # 后端服务器1，IP:10.200.1.231，端口8288，最大失败次数3次，失败超时30秒
    server 10.200.1.232:8288    max_fails=3 fail_timeout=30s;  # 后端服务器2，IP:10.200.1.232，端口8288，最大失败次数3次，失败超时30秒
    # fail_timeout时间内3次失败 → 标记为不可用 → 暂停转发请求30秒。30秒后自动恢复，重新加入负载均衡池
    # max_fails 默认为1，fail_timeout默认为10秒
}

# 主服务器配置块
server {  # 定义server块，包含服务器配置
    listen       8568  ;  # 监听8568端口，接受该端口的HTTP请求
    server_name  localhost;  # 服务器名称为localhost，用于基于名称的虚拟主机配置

    # 根路径配置，用于服务前端静态文件
    location / {  # 匹配所有请求路径
       root   html/cop-front;  # 设置根目录为html/cop-front
       index  index.html index.htm;  # 默认索引文件为index.html和index.htm
       try_files $uri $uri/ /index.html;  # 尝试按顺序查找文件，最后回退到index.html
    }

    # 图片等静态资源文件配置，设置1小时缓存提高性能
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|webp)$  # 正则匹配图片文件请求
    {
        root  html/cop-front;  # 设置根目录为html/cop-front
        # 设置缓存过期时间为1小时，浏览器请求相同资源时，会直接使用本地缓存而不再向服务器请求
        # ng在响应头中添加 Cache-Control: max-age=3600
        # 若资源有更新可能会有延迟
        expires 1h;
    }

    # JS/CSS静态文件配置，设置1小时缓存提高性能
    location ~ .*\.(js|css)?$  # 正则匹配JS和CSS文件请求
    {
        root  html/cop-front;
        expires 1h;
    }
    # API接口反向代理配置，将/casapi/路径请求转发到后端服务器
    location /casapi/ {  # 匹配/casapi/路径的请求
       # 关闭代理重定向，禁用Nginx对后端服务器返回的重定向(3xx响应)的自动修改，确保应用的重定向逻辑正常工作
       # TODO cas场景下应该是有必要的，但运管的代码好像对cas的重定向做了单独处理，要确认细节
       proxy_redirect off;
       proxy_set_header Host $http_host;  # 设置代理头Host为原始请求的Host
       # 设置X-Real-IP头传递客户端真实IP，使后端服务器能获取到原始客户端IP而非代理服务器IP
       # TODO cas服务端有ip映射识别管理，确认是否和该配置有关或上面的Host配置
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 设置X-Forwarded-For头传递转发链，记录完整的请求转发链
      
       proxy_pass http://cop-appserver/;  # 将请求代理到上游服务器组cop-appserver，cop作为casclient处理鉴权
       rewrite ^/casapi/(.*)$ /casapi/$1 break;  # 重写URL路径，保留/casapi/前缀，若不配置则会默认去除掉/casapi（由proxy_pass参数末尾有斜杠/触发的）
       # TODO 替换方案 移除rewrite，去除proxy_pass末尾的斜杠(proxy_pass http://cop-appserver)  待测试确认效果
     }
    # 应用接口反向代理配置，将/copapp/路径请求转发到后端服务器
    location /copapp/ {  # 匹配/copapp/路径的请求
      proxy_redirect off;  # 关闭代理重定向
      proxy_set_header Host $http_host;  # 设置代理头Host为原始请求的Host
      proxy_set_header X-Real-IP $remote_addr;  # 设置X-Real-IP头传递客户端真实IP
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 设置X-Forwarded-For头传递转发链

      proxy_pass http://cop-appserver/;  # 将请求代理到上游服务器组cop-appserver
      rewrite ^/copapp/(.*)$ /copapp/$1 break;  # 重写URL路径，保留/copapp/前缀
     }
       
    # 错误页面配置，当出现50x错误时返回/50x.html页面
     error_page   500 502 503 504  /50x.html;  # 定义500-504错误码对应的错误页面
     location = /50x.html {  # 精确匹配/50x.html请求
         root   /html;  # 设置错误页面的根目录为/html
     }
}


