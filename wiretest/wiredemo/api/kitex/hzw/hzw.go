// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package hzw

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type Timestamp = int64

type HzwDto struct {
	Id        int64     `thrift:"Id,1" frugal:"1,default,i64" json:"Id"`
	Name      string    `thrift:"Name,2" frugal:"2,default,string" json:"Name"`
	Age       int32     `thrift:"Age,3" frugal:"3,default,i32" json:"Age"`
	Version   int32     `thrift:"Version,4" frugal:"4,default,i32" json:"Version"`
	CreatedAt Timestamp `thrift:"CreatedAt,5" frugal:"5,default,i64" json:"CreatedAt"`
	UpdatedAt Timestamp `thrift:"UpdatedAt,6" frugal:"6,default,i64" json:"UpdatedAt"`
	Time1     Timestamp `thrift:"Time1,7" frugal:"7,default,i64" json:"Time1"`
	Time2     Timestamp `thrift:"Time2,8" frugal:"8,default,i64" json:"Time2"`
	Time3     Timestamp `thrift:"Time3,9" frugal:"9,default,i64" json:"Time3"`
	Decimal1  float64   `thrift:"Decimal1,10" frugal:"10,default,double" json:"Decimal1"`
}

func NewHzwDto() *HzwDto {
	return &HzwDto{}
}

func (p *HzwDto) InitDefault() {
}

func (p *HzwDto) GetId() (v int64) {
	return p.Id
}

func (p *HzwDto) GetName() (v string) {
	return p.Name
}

func (p *HzwDto) GetAge() (v int32) {
	return p.Age
}

func (p *HzwDto) GetVersion() (v int32) {
	return p.Version
}

func (p *HzwDto) GetCreatedAt() (v Timestamp) {
	return p.CreatedAt
}

func (p *HzwDto) GetUpdatedAt() (v Timestamp) {
	return p.UpdatedAt
}

func (p *HzwDto) GetTime1() (v Timestamp) {
	return p.Time1
}

func (p *HzwDto) GetTime2() (v Timestamp) {
	return p.Time2
}

func (p *HzwDto) GetTime3() (v Timestamp) {
	return p.Time3
}

func (p *HzwDto) GetDecimal1() (v float64) {
	return p.Decimal1
}
func (p *HzwDto) SetId(val int64) {
	p.Id = val
}
func (p *HzwDto) SetName(val string) {
	p.Name = val
}
func (p *HzwDto) SetAge(val int32) {
	p.Age = val
}
func (p *HzwDto) SetVersion(val int32) {
	p.Version = val
}
func (p *HzwDto) SetCreatedAt(val Timestamp) {
	p.CreatedAt = val
}
func (p *HzwDto) SetUpdatedAt(val Timestamp) {
	p.UpdatedAt = val
}
func (p *HzwDto) SetTime1(val Timestamp) {
	p.Time1 = val
}
func (p *HzwDto) SetTime2(val Timestamp) {
	p.Time2 = val
}
func (p *HzwDto) SetTime3(val Timestamp) {
	p.Time3 = val
}
func (p *HzwDto) SetDecimal1(val float64) {
	p.Decimal1 = val
}

var fieldIDToName_HzwDto = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "Age",
	4:  "Version",
	5:  "CreatedAt",
	6:  "UpdatedAt",
	7:  "Time1",
	8:  "Time2",
	9:  "Time3",
	10: "Decimal1",
}

func (p *HzwDto) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwDto[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwDto) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *HzwDto) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *HzwDto) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Age = _field
	return nil
}
func (p *HzwDto) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *HzwDto) ReadField5(iprot thrift.TProtocol) error {

	var _field Timestamp
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *HzwDto) ReadField6(iprot thrift.TProtocol) error {

	var _field Timestamp
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *HzwDto) ReadField7(iprot thrift.TProtocol) error {

	var _field Timestamp
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Time1 = _field
	return nil
}
func (p *HzwDto) ReadField8(iprot thrift.TProtocol) error {

	var _field Timestamp
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Time2 = _field
	return nil
}
func (p *HzwDto) ReadField9(iprot thrift.TProtocol) error {

	var _field Timestamp
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Time3 = _field
	return nil
}
func (p *HzwDto) ReadField10(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Decimal1 = _field
	return nil
}

func (p *HzwDto) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("HzwDto"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwDto) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HzwDto) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *HzwDto) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Age", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *HzwDto) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Version", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *HzwDto) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreatedAt", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *HzwDto) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedAt", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *HzwDto) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Time1", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Time1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *HzwDto) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Time2", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Time2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *HzwDto) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Time3", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Time3); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *HzwDto) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Decimal1", thrift.DOUBLE, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Decimal1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *HzwDto) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwDto(%+v)", *p)

}

func (p *HzwDto) DeepEqual(ano *HzwDto) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Age) {
		return false
	}
	if !p.Field4DeepEqual(ano.Version) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.Time1) {
		return false
	}
	if !p.Field8DeepEqual(ano.Time2) {
		return false
	}
	if !p.Field9DeepEqual(ano.Time3) {
		return false
	}
	if !p.Field10DeepEqual(ano.Decimal1) {
		return false
	}
	return true
}

func (p *HzwDto) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *HzwDto) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *HzwDto) Field3DeepEqual(src int32) bool {

	if p.Age != src {
		return false
	}
	return true
}
func (p *HzwDto) Field4DeepEqual(src int32) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *HzwDto) Field5DeepEqual(src Timestamp) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *HzwDto) Field6DeepEqual(src Timestamp) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *HzwDto) Field7DeepEqual(src Timestamp) bool {

	if p.Time1 != src {
		return false
	}
	return true
}
func (p *HzwDto) Field8DeepEqual(src Timestamp) bool {

	if p.Time2 != src {
		return false
	}
	return true
}
func (p *HzwDto) Field9DeepEqual(src Timestamp) bool {

	if p.Time3 != src {
		return false
	}
	return true
}
func (p *HzwDto) Field10DeepEqual(src float64) bool {

	if p.Decimal1 != src {
		return false
	}
	return true
}

type HzwService interface {
	CreateHzw(ctx context.Context, hzwDto *HzwDto) (r *HzwDto, err error)

	GetHzw(ctx context.Context, id int64) (r *HzwDto, err error)

	CreateHzwTxTest(ctx context.Context, hzwDto *HzwDto) (r *HzwDto, err error)
}

type HzwServiceCreateHzwArgs struct {
	HzwDto *HzwDto `thrift:"hzwDto,1" frugal:"1,default,HzwDto" json:"hzwDto"`
}

func NewHzwServiceCreateHzwArgs() *HzwServiceCreateHzwArgs {
	return &HzwServiceCreateHzwArgs{}
}

func (p *HzwServiceCreateHzwArgs) InitDefault() {
}

var HzwServiceCreateHzwArgs_HzwDto_DEFAULT *HzwDto

func (p *HzwServiceCreateHzwArgs) GetHzwDto() (v *HzwDto) {
	if !p.IsSetHzwDto() {
		return HzwServiceCreateHzwArgs_HzwDto_DEFAULT
	}
	return p.HzwDto
}
func (p *HzwServiceCreateHzwArgs) SetHzwDto(val *HzwDto) {
	p.HzwDto = val
}

var fieldIDToName_HzwServiceCreateHzwArgs = map[int16]string{
	1: "hzwDto",
}

func (p *HzwServiceCreateHzwArgs) IsSetHzwDto() bool {
	return p.HzwDto != nil
}

func (p *HzwServiceCreateHzwArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwServiceCreateHzwArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewHzwDto()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HzwDto = _field
	return nil
}

func (p *HzwServiceCreateHzwArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHzw_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hzwDto", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.HzwDto.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HzwServiceCreateHzwArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwServiceCreateHzwArgs(%+v)", *p)

}

func (p *HzwServiceCreateHzwArgs) DeepEqual(ano *HzwServiceCreateHzwArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HzwDto) {
		return false
	}
	return true
}

func (p *HzwServiceCreateHzwArgs) Field1DeepEqual(src *HzwDto) bool {

	if !p.HzwDto.DeepEqual(src) {
		return false
	}
	return true
}

type HzwServiceCreateHzwResult struct {
	Success *HzwDto `thrift:"success,0,optional" frugal:"0,optional,HzwDto" json:"success,omitempty"`
}

func NewHzwServiceCreateHzwResult() *HzwServiceCreateHzwResult {
	return &HzwServiceCreateHzwResult{}
}

func (p *HzwServiceCreateHzwResult) InitDefault() {
}

var HzwServiceCreateHzwResult_Success_DEFAULT *HzwDto

func (p *HzwServiceCreateHzwResult) GetSuccess() (v *HzwDto) {
	if !p.IsSetSuccess() {
		return HzwServiceCreateHzwResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HzwServiceCreateHzwResult) SetSuccess(x interface{}) {
	p.Success = x.(*HzwDto)
}

var fieldIDToName_HzwServiceCreateHzwResult = map[int16]string{
	0: "success",
}

func (p *HzwServiceCreateHzwResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HzwServiceCreateHzwResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwServiceCreateHzwResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewHzwDto()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *HzwServiceCreateHzwResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHzw_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HzwServiceCreateHzwResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwServiceCreateHzwResult(%+v)", *p)

}

func (p *HzwServiceCreateHzwResult) DeepEqual(ano *HzwServiceCreateHzwResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HzwServiceCreateHzwResult) Field0DeepEqual(src *HzwDto) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type HzwServiceGetHzwArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewHzwServiceGetHzwArgs() *HzwServiceGetHzwArgs {
	return &HzwServiceGetHzwArgs{}
}

func (p *HzwServiceGetHzwArgs) InitDefault() {
}

func (p *HzwServiceGetHzwArgs) GetId() (v int64) {
	return p.Id
}
func (p *HzwServiceGetHzwArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_HzwServiceGetHzwArgs = map[int16]string{
	1: "id",
}

func (p *HzwServiceGetHzwArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwServiceGetHzwArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwServiceGetHzwArgs) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *HzwServiceGetHzwArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetHzw_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwServiceGetHzwArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HzwServiceGetHzwArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwServiceGetHzwArgs(%+v)", *p)

}

func (p *HzwServiceGetHzwArgs) DeepEqual(ano *HzwServiceGetHzwArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *HzwServiceGetHzwArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type HzwServiceGetHzwResult struct {
	Success *HzwDto `thrift:"success,0,optional" frugal:"0,optional,HzwDto" json:"success,omitempty"`
}

func NewHzwServiceGetHzwResult() *HzwServiceGetHzwResult {
	return &HzwServiceGetHzwResult{}
}

func (p *HzwServiceGetHzwResult) InitDefault() {
}

var HzwServiceGetHzwResult_Success_DEFAULT *HzwDto

func (p *HzwServiceGetHzwResult) GetSuccess() (v *HzwDto) {
	if !p.IsSetSuccess() {
		return HzwServiceGetHzwResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HzwServiceGetHzwResult) SetSuccess(x interface{}) {
	p.Success = x.(*HzwDto)
}

var fieldIDToName_HzwServiceGetHzwResult = map[int16]string{
	0: "success",
}

func (p *HzwServiceGetHzwResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HzwServiceGetHzwResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwServiceGetHzwResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwServiceGetHzwResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewHzwDto()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *HzwServiceGetHzwResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetHzw_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwServiceGetHzwResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HzwServiceGetHzwResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwServiceGetHzwResult(%+v)", *p)

}

func (p *HzwServiceGetHzwResult) DeepEqual(ano *HzwServiceGetHzwResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HzwServiceGetHzwResult) Field0DeepEqual(src *HzwDto) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type HzwServiceCreateHzwTxTestArgs struct {
	HzwDto *HzwDto `thrift:"hzwDto,1" frugal:"1,default,HzwDto" json:"hzwDto"`
}

func NewHzwServiceCreateHzwTxTestArgs() *HzwServiceCreateHzwTxTestArgs {
	return &HzwServiceCreateHzwTxTestArgs{}
}

func (p *HzwServiceCreateHzwTxTestArgs) InitDefault() {
}

var HzwServiceCreateHzwTxTestArgs_HzwDto_DEFAULT *HzwDto

func (p *HzwServiceCreateHzwTxTestArgs) GetHzwDto() (v *HzwDto) {
	if !p.IsSetHzwDto() {
		return HzwServiceCreateHzwTxTestArgs_HzwDto_DEFAULT
	}
	return p.HzwDto
}
func (p *HzwServiceCreateHzwTxTestArgs) SetHzwDto(val *HzwDto) {
	p.HzwDto = val
}

var fieldIDToName_HzwServiceCreateHzwTxTestArgs = map[int16]string{
	1: "hzwDto",
}

func (p *HzwServiceCreateHzwTxTestArgs) IsSetHzwDto() bool {
	return p.HzwDto != nil
}

func (p *HzwServiceCreateHzwTxTestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwServiceCreateHzwTxTestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwTxTestArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewHzwDto()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.HzwDto = _field
	return nil
}

func (p *HzwServiceCreateHzwTxTestArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHzwTxTest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwTxTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hzwDto", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.HzwDto.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HzwServiceCreateHzwTxTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwServiceCreateHzwTxTestArgs(%+v)", *p)

}

func (p *HzwServiceCreateHzwTxTestArgs) DeepEqual(ano *HzwServiceCreateHzwTxTestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HzwDto) {
		return false
	}
	return true
}

func (p *HzwServiceCreateHzwTxTestArgs) Field1DeepEqual(src *HzwDto) bool {

	if !p.HzwDto.DeepEqual(src) {
		return false
	}
	return true
}

type HzwServiceCreateHzwTxTestResult struct {
	Success *HzwDto `thrift:"success,0,optional" frugal:"0,optional,HzwDto" json:"success,omitempty"`
}

func NewHzwServiceCreateHzwTxTestResult() *HzwServiceCreateHzwTxTestResult {
	return &HzwServiceCreateHzwTxTestResult{}
}

func (p *HzwServiceCreateHzwTxTestResult) InitDefault() {
}

var HzwServiceCreateHzwTxTestResult_Success_DEFAULT *HzwDto

func (p *HzwServiceCreateHzwTxTestResult) GetSuccess() (v *HzwDto) {
	if !p.IsSetSuccess() {
		return HzwServiceCreateHzwTxTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HzwServiceCreateHzwTxTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*HzwDto)
}

var fieldIDToName_HzwServiceCreateHzwTxTestResult = map[int16]string{
	0: "success",
}

func (p *HzwServiceCreateHzwTxTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HzwServiceCreateHzwTxTestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HzwServiceCreateHzwTxTestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwTxTestResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewHzwDto()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *HzwServiceCreateHzwTxTestResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHzwTxTest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HzwServiceCreateHzwTxTestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HzwServiceCreateHzwTxTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HzwServiceCreateHzwTxTestResult(%+v)", *p)

}

func (p *HzwServiceCreateHzwTxTestResult) DeepEqual(ano *HzwServiceCreateHzwTxTestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *HzwServiceCreateHzwTxTestResult) Field0DeepEqual(src *HzwDto) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
