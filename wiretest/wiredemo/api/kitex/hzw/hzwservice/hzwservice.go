// Code generated by Kitex v0.12.3. DO NOT EDIT.

package hzwservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	hzw "wiredemo/api/kitex/hzw"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateHzw": kitex.NewMethodInfo(
		createHzwHandler,
		newHzwServiceCreateHzwArgs,
		newHzwServiceCreateHzwResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetHzw": kitex.NewMethodInfo(
		getHzwHandler,
		newHzwServiceGetHzwArgs,
		newHzwServiceGetHzwResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateHzwTxTest": kitex.NewMethodInfo(
		createHzwTxTestHandler,
		newHzwServiceCreateHzwTxTestArgs,
		newHzwServiceCreateHzwTxTestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	hzwServiceServiceInfo                = NewServiceInfo()
	hzwServiceServiceInfoForClient       = NewServiceInfoForClient()
	hzwServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return hzwServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return hzwServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return hzwServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "HzwService"
	handlerType := (*hzw.HzwService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "hzw",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func createHzwHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hzw.HzwServiceCreateHzwArgs)
	realResult := result.(*hzw.HzwServiceCreateHzwResult)
	success, err := handler.(hzw.HzwService).CreateHzw(ctx, realArg.HzwDto)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHzwServiceCreateHzwArgs() interface{} {
	return hzw.NewHzwServiceCreateHzwArgs()
}

func newHzwServiceCreateHzwResult() interface{} {
	return hzw.NewHzwServiceCreateHzwResult()
}

func getHzwHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hzw.HzwServiceGetHzwArgs)
	realResult := result.(*hzw.HzwServiceGetHzwResult)
	success, err := handler.(hzw.HzwService).GetHzw(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHzwServiceGetHzwArgs() interface{} {
	return hzw.NewHzwServiceGetHzwArgs()
}

func newHzwServiceGetHzwResult() interface{} {
	return hzw.NewHzwServiceGetHzwResult()
}

func createHzwTxTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hzw.HzwServiceCreateHzwTxTestArgs)
	realResult := result.(*hzw.HzwServiceCreateHzwTxTestResult)
	success, err := handler.(hzw.HzwService).CreateHzwTxTest(ctx, realArg.HzwDto)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHzwServiceCreateHzwTxTestArgs() interface{} {
	return hzw.NewHzwServiceCreateHzwTxTestArgs()
}

func newHzwServiceCreateHzwTxTestResult() interface{} {
	return hzw.NewHzwServiceCreateHzwTxTestResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateHzw(ctx context.Context, hzwDto *hzw.HzwDto) (r *hzw.HzwDto, err error) {
	var _args hzw.HzwServiceCreateHzwArgs
	_args.HzwDto = hzwDto
	var _result hzw.HzwServiceCreateHzwResult
	if err = p.c.Call(ctx, "CreateHzw", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHzw(ctx context.Context, id int64) (r *hzw.HzwDto, err error) {
	var _args hzw.HzwServiceGetHzwArgs
	_args.Id = id
	var _result hzw.HzwServiceGetHzwResult
	if err = p.c.Call(ctx, "GetHzw", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateHzwTxTest(ctx context.Context, hzwDto *hzw.HzwDto) (r *hzw.HzwDto, err error) {
	var _args hzw.HzwServiceCreateHzwTxTestArgs
	_args.HzwDto = hzwDto
	var _result hzw.HzwServiceCreateHzwTxTestResult
	if err = p.c.Call(ctx, "CreateHzwTxTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
