// Code generated by aic-ent, DO NOT EDIT
// Code generated by aic-ent, DO NOT EDIT
// Code generated by aic-ent, DO NOT EDIT

package dao
import (
    "context"
    "wiredemo/aicenttest/repository/model"
	db "aic.com/pkg/aicgormdb"
)

type UserTestDao struct{
	*db.Repository
}

// GetUserTestDao get dao instance
func GetUserTestDao(repository *db.Repository) *UserTestDao{
    return &UserTestDao{
        Repository: repository,
    }
}

func (dao *UserTestDao) InsertOne(ctx context.Context,arg *model.UserTest)(int64,error){
    result:=dao.DB(ctx).Create(arg)
    return result.RowsAffected, result.Error
}

func (dao *UserTestDao) FindByPrimaryKey(ctx context.Context, UserId int64) (*model.UserTest,error) {
   findRes :=&model.UserTest{}
   result:=dao.DB(ctx).Where("USER_ID",UserId).Find(findRes)
   return findRes,result.Error
}

func (dao *UserTestDao) UpdateByPrimaryKey(ctx context.Context,arg *model.UserTest)(int64,error){
      result:=dao.DB(ctx).Save(arg)
      return result.RowsAffected, result.Error
}

func (dao *UserTestDao) DeleteByPrimaryKey(ctx context.Context, UserId int64)(int64,error){
      result:=dao.DB(ctx).Where("USER_ID",UserId).Delete(&model.UserTest{})
      return result.RowsAffected, result.Error
}

func (dao *UserTestDao) FindByUserName(ctx context.Context,UserName string)([]model.UserTest,error){
   var list []model.UserTest
   result:=dao.DB(ctx).Where("USER_NAME", UserName).Find(&list)
   return list,result.Error
}

func (dao *UserTestDao) FindByIdNoIdType(ctx context.Context,IdNo string,IdType string)(*model.UserTest,error){
   findRes :=&model.UserTest{}
   result:=dao.DB(ctx).Where("ID_NO",IdNo).Where("ID_TYPE",IdType).Find(findRes)
   return findRes,result.Error
}

func (dao *UserTestDao) FindByAAA (ctx context.Context,arg *model.FindByAAAArg) ([]*model.UserTest,error){
    var list []*model.UserTest
    result:=dao.DB(ctx).Raw("SELECT * FROM USER_TEST WHERE ID_NO = @IdNo AND BIRTHDAY = @Birthday",arg).Find(list)
    return list, result.Error
}