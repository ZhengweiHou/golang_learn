// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"aic.com/pkg/aicgormdb"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"log/slog"
	"wiredemo/internal/controller"
	"wiredemo/internal/repository/dao"
	"wiredemo/internal/server"
	"wiredemo/internal/service"
	"wiredemo/pkg/app"
	"wiredemo/pkg/log"
	"wiredemo/pkg/server/kitex"
)

// Injectors from wire.go:

// wire 整合构建
func NewWire(viperViper *viper.Viper) (*app.App, func(), error) {
	logger := log.NewZapLog(viperViper)
	zapHandler := log.NewZapHandler(logger)
	slogLogger := log.NewZapSlog(zapHandler)
	loggerInterface := aicgormdb.NewZapGormLog(logger)
	db := aicgormdb.NewDB(viperViper, loggerInterface)
	repository := aicgormdb.NewRepository(slogLogger, db)
	transactionManager := aicgormdb.NewTransactionManager(repository)
	baseService := service.NewService(transactionManager, slogLogger)
	iHzwDao := dao.NewHzwDao(repository)
	iHzwService := service.NewHzwService(baseService, iHzwDao)
	helloController := controller.NewHelloController(iHzwService)
	bybyController := controller.NewBybyController(iHzwService)
	kitexServer := server.NewKitexServer(slogLogger, viperViper, helloController, bybyController)
	appApp, cleanup := newApp(kitexServer, slogLogger)
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

// 应用服务器实现
var ServerSet = wire.NewSet(server.NewKitexServer)

// http 处理器
var ControllerSet = wire.NewSet(controller.NewHzwController, controller.NewHelloController, controller.NewBybyController)

// 业务服务
var ServiceSet = wire.NewSet(service.NewService, service.NewHzwService)

// build App
func newApp(
	kitexServer *kitex.Server,
	logger *slog.Logger,

) (*app.App, func()) {
	return app.NewApp(app.WithServer(kitexServer), app.WithName("wiredemo-kitex-server"), app.WithLogger(logger))
}
