// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"wiredemo/internal/controller"
	"wiredemo/internal/repository"
	"wiredemo/internal/server"
	"wiredemo/internal/service"
	"wiredemo/pkg/app"
	"wiredemo/pkg/db"
	"wiredemo/pkg/log"
	"wiredemo/pkg/server/kitex"
)

// Injectors from wire.go:

// wire 整合构建
func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	gormDB := db.NewDB(viperViper, logger)
	dbRepository := db.NewRepository(logger, gormDB)
	transactionManager := db.NewTransactionManager(dbRepository)
	baseService := service.NewService(transactionManager, logger)
	iHzwDao := repository.NewHzwDao(dbRepository)
	iHzwService := service.NewHzwService(baseService, iHzwDao)
	helloController := controller.NewHelloController(iHzwService)
	bybyController := controller.NewBybyController(iHzwService)
	kitexServer := server.NewKitexServer(logger, viperViper, helloController, bybyController)
	appApp, cleanup := newApp(kitexServer)
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

// 应用服务器实现
var ServerSet = wire.NewSet(server.NewKitexServer)

// http 处理器
var ControllerSet = wire.NewSet(controller.NewHzwController, controller.NewHelloController, controller.NewBybyController)

// 业务服务
var ServiceSet = wire.NewSet(service.NewService, service.NewHzwService)

// 数据访问层
var RepositorySet = wire.NewSet(repository.NewHzwDao)

// build App
func newApp(
	kitexServer *kitex.Server,

) (*app.App, func()) {
	return app.NewApp(app.WithServer(kitexServer), app.WithName("wiredemo-kitex-server"))
}
