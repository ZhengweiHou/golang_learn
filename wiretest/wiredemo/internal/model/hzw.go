package model

import (
	"fmt"
	"time"

	"gorm.io/gorm"
)

type Hzw struct {
	//gorm.Model      // this is a struct that contains ID, CreatedAt, UpdatedAt, DeletedAt
	ID        uint      `gorm:"primarykey"`
	Name      string    `gorm:"column:NAME;size:100;not null"`
	Age       int       `gorm:"column:AGE"`
	Version   int32     `gorm:"column:VERSION;default:0"`
	CreatedAt time.Time `gorm:"column:CREATED_AT"`           // CreatedAt is a field that contains create time
	UpdatedAt time.Time `gorm:"column:UPDATED_AT"`           // UpdatedAt is a field that contains update time
	Time1     time.Time `gorm:"AUTOUPDATETIME;column:TIME1"` // AUTOUPDATETIME means update time when update, like UpdatedAt
	Time2     time.Time `gorm:"AUTOCREATETIME;column:TIME2"` // AUTOCREATETIME means create time when insert, like CreatedAt
	Time3     time.Time `gorm:"column:TIME3"`
	Decimal1  float64   `gorm:"column:DECIMAL1"`
	// DeletedAt gorm.DeletedAt `gorm:"index"`
}

func (Hzw) TableName() string {
	return "hzw"
}

func (h *Hzw) BeforeSave(tx *gorm.DB) (err error) {
	fmt.Printf("====== BeforeSave  name=%s ======\n", h.Name)
	return
}
func (h *Hzw) BeforeCreate(tx *gorm.DB) (err error) {
	fmt.Printf("====== BeforeCreate  name=%s ======\n", h.Name)
	return
}
func (h *Hzw) AfterCreate(tx *gorm.DB) (err error) {
	fmt.Printf("====== AfterCreate  name=%s id=%d ======\n", h.Name, h.ID)
	return
}
func (h *Hzw) AfterSave(tx *gorm.DB) (err error) {
	fmt.Printf("====== AfterSave  name=%s id=%d ======\n", h.Name, h.ID)
	return
}

/**
======= DB2 ==========
CREATE TABLE "HZW"  (
		  "ID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
		  "NAME" VARCHAR(225) NOT NULL ,
		  "AGE" INTEGER ,
		  "VERSION" INTEGER ,
		  "CREATED_AT" TIMESTAMP ,
		  "UPDATED_AT" TIMESTAMP ,
		  "TIME1" TIMESTAMP ,
		  "TIME2" TIMESTAMP ,
		  "TIME3" TIMESTAMP ,
		  "DELETED_AT" TIMESTAMP ,
		  "DECIMAL1" DECIMAL(10,4)
		  ) ;
ALTER TABLE "HZW"
	ADD PRIMARY KEY
		("ID");

======= MYSQL =======
CREATE TABLE HZW (
    ID INT AUTO_INCREMENT NOT NULL,
    NAME VARCHAR(225) NOT NULL,
    AGE INT,
    VERSION INT,
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    TIME1 TIMESTAMP,
    TIME2 TIMESTAMP,
    TIME3 TIMESTAMP,
    DELETED_AT TIMESTAMP,
    DECIMAL1 decimal(10,4),
    PRIMARY KEY (ID)
)
**/

// Hzw clone 方法
func (h *Hzw) Clone() *Hzw {
	return &Hzw{
		ID:        h.ID,
		Name:      h.Name,
		Age:       h.Age,
		Version:   h.Version,
		CreatedAt: h.CreatedAt,
		UpdatedAt: h.UpdatedAt,
		Time1:     h.Time1,
		Time2:     h.Time2,
		Time3:     h.Time3,
		Decimal1:  h.Decimal1,
	}
}
