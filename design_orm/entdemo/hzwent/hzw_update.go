// Code generated by ent, DO NOT EDIT.

package hzwent

import (
	"context"
	"entdemo/hzwent/hzw"
	"entdemo/hzwent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HzwUpdate is the builder for updating Hzw entities.
type HzwUpdate struct {
	config
	hooks    []Hook
	mutation *HzwMutation
}

// Where appends a list predicates to the HzwUpdate builder.
func (hu *HzwUpdate) Where(ps ...predicate.Hzw) *HzwUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetStuNo sets the "stuNo" field.
func (hu *HzwUpdate) SetStuNo(s string) *HzwUpdate {
	hu.mutation.SetStuNo(s)
	return hu
}

// SetNillableStuNo sets the "stuNo" field if the given value is not nil.
func (hu *HzwUpdate) SetNillableStuNo(s *string) *HzwUpdate {
	if s != nil {
		hu.SetStuNo(*s)
	}
	return hu
}

// SetName sets the "name" field.
func (hu *HzwUpdate) SetName(s string) *HzwUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HzwUpdate) SetNillableName(s *string) *HzwUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// SetAge sets the "age" field.
func (hu *HzwUpdate) SetAge(i int) *HzwUpdate {
	hu.mutation.ResetAge()
	hu.mutation.SetAge(i)
	return hu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (hu *HzwUpdate) SetNillableAge(i *int) *HzwUpdate {
	if i != nil {
		hu.SetAge(*i)
	}
	return hu
}

// AddAge adds i to the "age" field.
func (hu *HzwUpdate) AddAge(i int) *HzwUpdate {
	hu.mutation.AddAge(i)
	return hu
}

// SetVersion sets the "version" field.
func (hu *HzwUpdate) SetVersion(i int32) *HzwUpdate {
	hu.mutation.ResetVersion()
	hu.mutation.SetVersion(i)
	return hu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (hu *HzwUpdate) SetNillableVersion(i *int32) *HzwUpdate {
	if i != nil {
		hu.SetVersion(*i)
	}
	return hu
}

// AddVersion adds i to the "version" field.
func (hu *HzwUpdate) AddVersion(i int32) *HzwUpdate {
	hu.mutation.AddVersion(i)
	return hu
}

// Mutation returns the HzwMutation object of the builder.
func (hu *HzwUpdate) Mutation() *HzwMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HzwUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HzwUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HzwUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HzwUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HzwUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hzw.Table, hzw.Columns, sqlgraph.NewFieldSpec(hzw.FieldID, field.TypeUUID))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.StuNo(); ok {
		_spec.SetField(hzw.FieldStuNo, field.TypeString, value)
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(hzw.FieldName, field.TypeString, value)
	}
	if value, ok := hu.mutation.Age(); ok {
		_spec.SetField(hzw.FieldAge, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedAge(); ok {
		_spec.AddField(hzw.FieldAge, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Version(); ok {
		_spec.SetField(hzw.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := hu.mutation.AddedVersion(); ok {
		_spec.AddField(hzw.FieldVersion, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hzw.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HzwUpdateOne is the builder for updating a single Hzw entity.
type HzwUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HzwMutation
}

// SetStuNo sets the "stuNo" field.
func (huo *HzwUpdateOne) SetStuNo(s string) *HzwUpdateOne {
	huo.mutation.SetStuNo(s)
	return huo
}

// SetNillableStuNo sets the "stuNo" field if the given value is not nil.
func (huo *HzwUpdateOne) SetNillableStuNo(s *string) *HzwUpdateOne {
	if s != nil {
		huo.SetStuNo(*s)
	}
	return huo
}

// SetName sets the "name" field.
func (huo *HzwUpdateOne) SetName(s string) *HzwUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HzwUpdateOne) SetNillableName(s *string) *HzwUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// SetAge sets the "age" field.
func (huo *HzwUpdateOne) SetAge(i int) *HzwUpdateOne {
	huo.mutation.ResetAge()
	huo.mutation.SetAge(i)
	return huo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (huo *HzwUpdateOne) SetNillableAge(i *int) *HzwUpdateOne {
	if i != nil {
		huo.SetAge(*i)
	}
	return huo
}

// AddAge adds i to the "age" field.
func (huo *HzwUpdateOne) AddAge(i int) *HzwUpdateOne {
	huo.mutation.AddAge(i)
	return huo
}

// SetVersion sets the "version" field.
func (huo *HzwUpdateOne) SetVersion(i int32) *HzwUpdateOne {
	huo.mutation.ResetVersion()
	huo.mutation.SetVersion(i)
	return huo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (huo *HzwUpdateOne) SetNillableVersion(i *int32) *HzwUpdateOne {
	if i != nil {
		huo.SetVersion(*i)
	}
	return huo
}

// AddVersion adds i to the "version" field.
func (huo *HzwUpdateOne) AddVersion(i int32) *HzwUpdateOne {
	huo.mutation.AddVersion(i)
	return huo
}

// Mutation returns the HzwMutation object of the builder.
func (huo *HzwUpdateOne) Mutation() *HzwMutation {
	return huo.mutation
}

// Where appends a list predicates to the HzwUpdate builder.
func (huo *HzwUpdateOne) Where(ps ...predicate.Hzw) *HzwUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HzwUpdateOne) Select(field string, fields ...string) *HzwUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hzw entity.
func (huo *HzwUpdateOne) Save(ctx context.Context) (*Hzw, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HzwUpdateOne) SaveX(ctx context.Context) *Hzw {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HzwUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HzwUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HzwUpdateOne) sqlSave(ctx context.Context) (_node *Hzw, err error) {
	_spec := sqlgraph.NewUpdateSpec(hzw.Table, hzw.Columns, sqlgraph.NewFieldSpec(hzw.FieldID, field.TypeUUID))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`hzwent: missing "Hzw.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hzw.FieldID)
		for _, f := range fields {
			if !hzw.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("hzwent: invalid field %q for query", f)}
			}
			if f != hzw.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.StuNo(); ok {
		_spec.SetField(hzw.FieldStuNo, field.TypeString, value)
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(hzw.FieldName, field.TypeString, value)
	}
	if value, ok := huo.mutation.Age(); ok {
		_spec.SetField(hzw.FieldAge, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedAge(); ok {
		_spec.AddField(hzw.FieldAge, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Version(); ok {
		_spec.SetField(hzw.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := huo.mutation.AddedVersion(); ok {
		_spec.AddField(hzw.FieldVersion, field.TypeInt32, value)
	}
	_node = &Hzw{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hzw.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
